// [ @mixins ]

// Color and Background rgba with fallback
@mixin alpha-variant($property, $color, $alpha) {
    $rgba: rgba($color, $alpha);
    $ie-hex-str: ie-hex-str($rgba);
  
    @if $property == color {
      color: $color;
      color: $rgba;
    }
    
    @else if $property == bg , background {
      background-color: transparent;
      background-color: $rgba;
      filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
      zoom: 1;
    }
}

// Center an element with absolute position 
@mixin abs-center($dir, $el-width, $el-height) {
  position: absolute;
  @if $dir == hzl {
    left: 50%;
    margin-left: (- $el-width / 2);
  }
  @else if $dir == vcl {
    top: 50%;
    margin-top: (- $el-height / 2);
  }
  @else if $dir == ctr {
    top: 50%;
    left: 50%;
    margin-top: (- $el-height / 2);
    margin-left: (- $el-width / 2);
  }
}
// Usgae
//@include abs-center(hzl, xpx, null)
//@include abs-center(vcl, null, xpx)
//@include abs-center(ctr, xpx, xpx)

// keyframes Mixin
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
  @-moz-keyframes #{$name}    { @content; }
  @-ms-keyframes #{$name}     { @content; }
  @keyframes #{$name}         { @content; } 
}

// Vendor Prefixing
@mixin vendorize($property, $value) {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
    #{$property}: $value;
}

// Rounded Box
@mixin circle($size) {
     width: $size;
     height: $size;
     overflow: hidden;
     @include border-radius(100%); 
}

// #breakpoint
@mixin breakpoint($point) {

  // mid-devices = 998px and below
  @if $point == mid-devices {
    @media (max-width: $midDevices) { @content; }
  }
  
  // mid-devices = 1150px and below
  @if $point == range-screen {
    @media (max-width: $rangeSize) { @content; }
  }

  // large-screen = 1200 and above
  @else if $point == large-screen {
    @media (min-width: $largeScreen) { @content; }
  } 

  // desktop = 1200 and below
  @else if $point == desktop {
    @media (max-width: $largeScreen) { @content; }
  } 

  // tablet = 768px and below
  @else if $point == tablet {
    @media (max-width: $tablet) { @content; }
  }
  
  // small devices = 660px and below
  @else if $point == sm-devices {
    @media (max-width: $smDevices) { @content; }
  }

  // mobile = 480 and below
  @else if $point == mobile {
    @media (max-width: $landtoPort)  { @content; }
  } 
}
                    

// #triangle
@mixin triangle($dir, $color, $size) {
 
  @if $dir == "left" {
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    border-top: $size solid transparent;
  }
  @else if $dir == "right" {
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-top: $size solid transparent;
  }
  @else if $dir == "up" {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if $dir == "down" {
    border-right: $size solid transparent;
    border-left: $size solid transparent;
    border-top: $size solid $color;
  }
 
  height: 0;
  width: 0;
}

// #truncate text
@mixin text-truncate($boxSize) {
    width: $boxSize;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

$position-default-top:    null !default;
$position-default-right:  null !default;
$position-default-bottom: null !default;
$position-default-left:   null !default;


@mixin _position($type,
$top: $position-default-top, $right: $position-default-right,
$bottom: $position-default-bottom, $left: $position-default-left) {
  $allowed_types: 'absolute' 'relative' 'fixed';

  @if not index($allowed_types, $type) {
    @warn "Unknow position: #{$type}.";
  }

  position: $type;
  @each $data in top $top, right $right, bottom $bottom, left $left {
    #{nth($data, 1)}: nth($data, 2);
  }
}

@mixin absolute($top: $position-default-top, $right: $position-default-right,
$bottom: $position-default-bottom, $left: $position-default-left) {
  @include _position(absolute, $top, $right, $bottom, $left);
}

@mixin relative($top: $position-default-top, $right: $position-default-right,
$bottom: $position-default-bottom, $left: $position-default-left) {
  @include _position(relative, $top, $right, $bottom, $left);
}

@mixin fixed($top: $position-default-top, $right: $position-default-right,
$bottom: $position-default-bottom, $left: $position-default-left) {
  @include _position(fixed, $top, $right, $bottom, $left);
}
